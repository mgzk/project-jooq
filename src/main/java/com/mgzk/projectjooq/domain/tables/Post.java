/*
 * This file is generated by jOOQ.
 */
package com.mgzk.projectjooq.domain.tables;


import com.mgzk.projectjooq.domain.Keys;
import com.mgzk.projectjooq.domain.Public;
import com.mgzk.projectjooq.domain.tables.records.PostRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.POST</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>PUBLIC.POST.ID</code>.
     */
    public final TableField<PostRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.POST.TITLE</code>.
     */
    public final TableField<PostRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POST.BODY</code>.
     */
    public final TableField<PostRecord, String> BODY = createField(DSL.name("BODY"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    private Post(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.POST</code> table reference
     */
    public Post(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>PUBLIC.POST</code> table reference
     */
    public Post(Name alias) {
        this(alias, POST);
    }

    /**
     * Create a <code>PUBLIC.POST</code> table reference
     */
    public Post() {
        this(DSL.name("POST"), null);
    }

    public <O extends Record> Post(Table<O> child, ForeignKey<O, PostRecord> key) {
        super(child, key, POST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PostRecord, Integer> getIdentity() {
        return (Identity<PostRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public Post as(String alias) {
        return new Post(DSL.name(alias), this);
    }

    @Override
    public Post as(Name alias) {
        return new Post(alias, this);
    }

    @Override
    public Post as(Table<?> alias) {
        return new Post(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(String name) {
        return new Post(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Name name) {
        return new Post(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Table<?> name) {
        return new Post(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
